@import url("https://fonts.googleapis.com/css2?family=Chivo+Mono:ital,wght@0,100..900;1,100..900&display=swap");

* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  font-family: "Chivo Mono", monospace;
  margin: 0;
  padding: 0;
}

*::-webkit-scrollbar {
  display: none;
}

html {
  cursor: url("https://freight.cargo.site/t/original/i/591667f1873c9e075d94c049a99631c0e5464975b8fbadcaa5891eda1b2dff5b/Rectangle-1.png"),
    auto !important;
}

body {
  color: white;
  background-color: black;
}

a {
  color: white;
  text-decoration: none;
}

.title {
  font-size: 4em;
  font-weight: 900;
}

.heading {
  font-size: 2em;
  font-weight: 600;
}

.sub-heading {
  font-size: 1.5em;
  font-weight: 300;
}

.italic {
  font-style: italic;
}

/* Nav section */

.nav-section {
}

.nav-container {
}

.nav {
  background-color: white;
  position: fixed;
  right: 0;
  z-index: 99;
  width: 3em;
  height: 100vh;
  padding: 0;
  margin: 0;
  float: right;
}

.list {
  list-style: none;
  display: block;
  -webkit-writing-mode: vertical-rl;
  -ms-writing-mode: tb-rl;
  writing-mode: vertical-rl;
  padding: 30px 0 30px 0;
  line-height: 3em;
  color: black;
}

/* To create a rotating text effect for the navigation, I found an article on Stack Overflow that demonstrates how to achieve this using the CSS writing-mode property (https://stackoverflow.com/questions/59024097/vertical-text-in-table-cell-using-css3-writing-mode-in-chrome). I prefer using writing-mode because, unlike transform: rotate(90deg), it recalculates the dimensions of the table cell correctly. This prevents text from overflowing outside the cell in certain scenarios.

By employing writing-mode, I can ensure that the text displays vertically without the layout issues that can arise from using rotation transforms. This method not only enhances compatibility across different browsers but also maintains a clean and organized appearance for the navigation elements. */

.list a {
  text-decoration: none;
  color: black;
  text-align: center;
}

.list .btn {
  display: none;
}

.nav-sidebar {
  position: fixed;
  top: 0;
  right: 0;
  display: none;
  flex-direction: column;
  height: 100vh;
  width: 100vw;
  background-color: rgba(255, 255, 255, 0.3);
  backdrop-filter: blur(5px);
  z-index: 99;
  justify-content: flex-start;
  align-items: flex-start;
}

.list-sidebar {
  width: 100%;
  text-decoration: none;
  margin-left: auto;
  margin-right: auto;
  text-align: left;
  font-size: 2em;
  font-weight: 400;
  padding: 1em;
  list-style-type: none;
}

.list-sidebar a {
  text-decoration: none;
  text-align: center;
}

/* Reponsive for the nav */

@media (max-width: 900px) {
  .nav {
    background-color: transparent;
  }
  .list {
    display: none;
  }
  .btn {
    display: block;
    color: white;
  }
}

/* Landing video section */

#video {
  position: absolute;
  right: 0;
  top: 0;
  min-width: 100vw;
  min-height: 100vh;
  z-index: -10;
}

.hero-wrapper,
.sel-work-wrapper {
  width: 100vw;
  position: sticky;
  top: 0;
  background-color: black;
}

.hero-container {
  width: 100vw;
  height: 100vh;
}

.video-container {
}

.text-container {
  padding-right: 3em;
  width: 100vw;
  height: 100vh;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  position: relative;
}

/* Selected work section */
.sel-work-wrapper {
  width: 100vw;
  height: 100vh;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  overflow: hidden;
}

/* The reason I used so much display: flex is that I noticed the website doesn't render properly in Safari, even though it works great in Chrome. It seems that display: flex has inconsistent support across different browsers, particularly older versions of Safari. To ensure compatibility, I need to explore alternative approaches for Safari and other non-Chromium browsers. 

Recent updates indicate that while the gap property for Flexbox is fully supported in the latest versions of Safari (16.4 and beyond), earlier versions may not handle it well. This inconsistency necessitates a fallback or different layout strategy to achieve the desired visual outcome across all browsers. */

.sel-work-title {
  width: 90%;
}

.sel-work-container {
  padding-right: 3em;
  width: 90%;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex-direction: column;
}

.sel-work {
  padding: 1em 0 1em;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  align-items: center;
  border-bottom: 1px solid white;
  cursor: pointer;
}

.sel-work > div {
  flex: 1;
}

.sel-work div:last-child {
  flex: 0;
}

.sel-work-info {
  /* font-weight: 100; */
}

.project {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex-wrap: wrap;
}

.project p {
  width: 90%;
}

.sel-work-info:hover {
  color: rgb(184, 184, 184);
}

.sel-work-img {
  position: absolute;
  top: 0;
  left: 0;
  width: 400px;
  height: auto;
  object-fit: cover;
  opacity: 0;
  transition: opacity 0.5s ease-in-out;
  pointer-events: none;
}

.sel-work-container > a:hover .sel-work-img {
  opacity: 1;
}

.sel-work-container > a:hover {
  font-style: italic;
}

/* Responsive */

@media (max-width: 1024px) {
  .duration {
    display: none;
  }
}

@media (max-width: 900px) {
  .category,
  .duration {
    display: none;
  }
  .hero-container {
    padding-right: 0em;
  }
  .sel-work-img {
    position: relative;
    width: 100px;
    height: 100%;
    opacity: 1;
  }
}

